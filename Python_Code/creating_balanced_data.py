# -*- coding: utf-8 -*-
"""
Created on Fri Mar 15 08:59:43 2019

@author: marri
"""

import pandas as pd
import numpy as np
from sklearn import preprocessing

from imblearn.over_sampling import SMOTENC
from imblearn.over_sampling import SMOTE



filepath2 = ''

df2 = pd.read_csv(filepath2+'Finance_KNN_imputed.csv', sep=',', 
                  error_bad_lines=False, encoding="latin-1") #klopt.

bank_size=['Revenues', 'Equity',
       'TotalAssets', 'MarketCapital', 'NetIncome', 'NumberofCustomer',
       'Employees', 'Branches', 'LoansOfCustomers', 'DepositsofCustomers',
       'NumberofOnlineCustomer']



#delete rows that could not be imputed
missing = df2[(df2.Revenues == 0) & (df2.Equity == 0) & (df2.TotalAssets == 0) 
            & (df2.MarketCapital ==0 ) & (df2.NetIncome == 0) & 
            (df2.NumberofCustomer == 0) & (df2.Employees == 0) & 
            (df2.Branches == 0) & (df2.LoansOfCustomers == 0) & 
            (df2.DepositsofCustomers == 0) & 
            (df2.NumberofOnlineCustomer == 0)].index

df2.drop(missing , inplace=True)

#merge with financial datset; target dataset is a private dataset that is not 
#availible on github

df3 = pd.merge(df2, target, left_on ='Index_sam', right_on='index_uniqname')

#make dummy variable for country
df3 = pd.concat([df3, pd.get_dummies(df3['country'], prefix='Country', 
                                     columns='country')], axis=1)


#make the "being part of banking group"
parent = list(df3['parent bank'].dropna().unique())
df3['has_parent']= np.where( df3['parent bank'].isin(parent), 1, 
   (np.where(df3['subent_name'].isin(parent), 1, 0)))

#BrandRanking toevoegen
brand = pd.read_excel(filepath2+'MergeBrand2.xlsx', sheet_name='MergeBrand', 
                      sep=';', error_bad_lines=False, encoding="latin-1")
df3 = pd.merge(df3, brand, on=['subent_name', 'parent bank'], how='outer')
df3.Rank2017 = df3.Rank2017.fillna(0)

#normalise
df3[['Rank2017']] = preprocessing.MinMaxScaler().fit_transform(df3[['Rank2017']])
df3[['pop_score']] = preprocessing.MinMaxScaler().fit_transform(df3[['pop_score']])


# =============================================================================
# Correlation
# =============================================================================

bank_size_indicators = ['Revenues',
       'Equity', 'TotalAssets', 'MarketCapital', 'NetIncome',
       'NumberofCustomer', 'Employees', 'Branches', 'LoansOfCustomers',
       'DepositsofCustomers', 'NumberofOnlineCustomer']



correlation = df3[bank_size_indicators].corr() 

#correlation heatmap
import numpy as np; np.random.seed(0)
import seaborn as sns; sns.set()
corr = df3[bank_size_indicators].corr() 
ax = sns.heatmap(corr, cmap="YlGnBu", annot=True, fmt="d")

#p-values of correlation

from scipy.stats import pearsonr

def calculate_pvalues(df):
    df = df.dropna()._get_numeric_data()
    dfcols = pd.DataFrame(columns=df.columns)
    pvalues = dfcols.transpose().join(dfcols, how='outer')
    for r in df.columns:
        for c in df.columns:
            pvalues[r][c] = round(pearsonr(df[r], df[c])[1], 4)
    return pvalues

p_values= calculate_pvalues(df3[bank_size_indicators])


# =============================================================================
# Make Float
# =============================================================================
df3_logit = df3[['Revenues', 'Equity', 'TotalAssets', 'MarketCapital', 'NetIncome',
       'NumberofCustomer', 'Employees', 'Branches', 'LoansOfCustomers',
       'DepositsofCustomers', 'NumberofOnlineCustomer', 'langEnglish', 'langGerman', 'langFrench',
       'langDutch', 'langItalian', 'langSpanish', 'langPortugese', 'langGreek',
       'langCzech', 'langSlovak', 'langSlovenian', 'langPolish',
       'langHungarian', 'langRomanian', 'langBulgarian', 'langDanish',
       'langSwedish', 'langFinnish', 'langLatvian', 'langEstonian',
       'langLithuanian', 'auth1FA', 'auth2FA', 'lang_count', 'pop_score', 'Country_Austria', 'Country_Belgium', 'Country_Bulgaria',
       'Country_Croatia', 'Country_Cyprus', 'Country_Czechia',
       'Country_Denmark', 'Country_Estonia', 'Country_Finland',
       'Country_France', 'Country_Germany', 'Country_Greece',
       'Country_Hungary', 'Country_Ireland', 'Country_Italy', 'Country_Latvia',
       'Country_Lithuania', 'Country_Luxembourg', 'Country_Malta',
       'Country_Netherlands', 'Country_Poland', 'Country_Portugal',
       'Country_Romania', 'Country_Slovakia', 'Country_Slovenia',
       'Country_Spain', 'Country_Sweden', 'Country_United Kingdom', 'EmployeesOver500', 'EmployeesUnder250',
       'RevenuesUnder31', 'is_targeted', 
       'has_parent', 'Rank2017']].dropna()

Y=df3_logit.is_targeted.astype(float)
X= df3_logit[['Revenues', 'Equity', 'TotalAssets', 'MarketCapital', 'NetIncome',
       'NumberofCustomer', 'Employees', 'Branches', 'LoansOfCustomers',
       'DepositsofCustomers', 'NumberofOnlineCustomer', 'langEnglish', 'langGerman', 'langFrench',
       'langDutch', 'langItalian', 'langSpanish', 'langPortugese', 'langGreek',
       'langCzech', 'langSlovak', 'langSlovenian', 'langPolish',
       'langHungarian', 'langRomanian', 'langBulgarian', 'langDanish',
       'langSwedish', 'langFinnish', 'langLatvian', 'langEstonian',
       'langLithuanian', 'auth1FA', 'auth2FA', 'lang_count', 'pop_score',      
       'Country_Austria', 'Country_Belgium', 'Country_Bulgaria',
       'Country_Croatia', 'Country_Cyprus', 'Country_Czechia',
       'Country_Denmark', 'Country_Estonia', 'Country_Finland',
       'Country_France', 'Country_Germany', 'Country_Greece',
       'Country_Hungary', 'Country_Ireland', 'Country_Italy', 'Country_Latvia',
       'Country_Lithuania', 'Country_Luxembourg', 'Country_Malta',
       'Country_Netherlands', 'Country_Poland', 'Country_Portugal',
       'Country_Romania', 'Country_Slovakia', 'Country_Slovenia',
       'Country_Spain', 'Country_Sweden', 'Country_United Kingdom','EmployeesOver500', 'EmployeesUnder250',
       'RevenuesUnder31', 'has_parent', 
       'Rank2017']].astype(float)



# =============================================================================
# smote
# =============================================================================
#SMOTENC: categorical variable
#This is necessary otherwise you will get continuous variables

cat=df3_logit[['langEnglish', 'langGerman', 'langFrench', 'langDutch', 'langItalian',
       'langSpanish', 'langPortugese', 'langGreek', 'langCzech', 'langSlovak',
       'langSlovenian', 'langPolish', 'langHungarian', 'langRomanian',
       'langBulgarian', 'langDanish', 'langSwedish', 'langFinnish',
       'langLatvian', 'langEstonian', 'langLithuanian', 'auth1FA', 'auth2FA',
       'lang_count', 'pop_score', 'Country_Austria', 'Country_Belgium',
       'Country_Bulgaria', 'Country_Croatia', 'Country_Cyprus',
       'Country_Czechia', 'Country_Denmark', 'Country_Estonia',
       'Country_Finland', 'Country_France', 'Country_Germany',
       'Country_Greece', 'Country_Hungary', 'Country_Ireland', 'Country_Italy',
       'Country_Latvia', 'Country_Lithuania', 'Country_Luxembourg',
       'Country_Malta', 'Country_Netherlands', 'Country_Poland',
       'Country_Portugal', 'Country_Romania', 'Country_Slovakia',
       'Country_Slovenia', 'Country_Spain', 'Country_Sweden',
       'Country_United Kingdom', 'EmployeesOver500', 'EmployeesUnder250',
       'RevenuesUnder31', 'has_parent', #'Kit_Malware',
       #'Private_Malware', 'Rented_Malware', 
       'Rank2017']]

for i in cat.columns:
    cat[i] = cat[i].astype('bool')
    

sm = SMOTENC(random_state=0, categorical_features=[0, 1])
X_res, y_res = sm.fit_resample(cat, df3_logit.is_targeted)
cat_x = pd.DataFrame(data=X_res, columns=cat.columns)
cat_y= pd.DataFrame(data=y_res,columns=['is_targeted'])
cat=pd.concat([cat_x, cat_y], axis=1)
cat= cat.sort_values(by=['is_targeted'])

for i in cat.columns:
    cat[i] = cat[i].astype(int)
    

#SMOTE : continuous variables

con=df3_logit[['Revenues', 'Equity', 'TotalAssets', 'MarketCapital',
       'NetIncome', 'NumberofCustomer', 'Employees', 'Branches',
       'LoansOfCustomers', 'DepositsofCustomers', 'NumberofOnlineCustomer']]




os = SMOTE(random_state=0)
X_os, y_os = sm.fit_resample(con, df3_logit.is_targeted)
con_x = pd.DataFrame(data=X_os,columns=con.columns )
con_y= pd.DataFrame(data=y_os,columns=['is_targeted'])

con=pd.concat([con_x, con_y], axis=1)
con= con.sort_values(by=['is_targeted'])

smote6a=pd.concat([con_x, cat], axis=1)
